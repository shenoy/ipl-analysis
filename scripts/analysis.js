gv={};
window.onload = ()=>{
	let stage = gi('stage'),t1,t2,t3;
	t1=ce('div');ac(stage,t1);t1.innerHTML = 'I am a div';
	let files = [ 335982,	336036,	392231,	419150, 501236,	548323,	548378,	598047,	733983,	829743,	980927, 335983,	336037,	392232,	419151,	501237,	548324,	548379,	598048,	733985,	829745,	980929, 335984,	336038,	392233,	419152,	501238,	548325,	548380,	598049,	733987,	829747,	980931, 335985,	336039,	392234,	419153,	501239,	548326,	548381,	598050,	733989,	829749,	980933, 335986,	336040,	392235,	419154,	501240,	548327,	597998,	598051,	733991,	829751,	980935, 335987,	392181,	392236,	419155,	501241,	548328,	597999,	598052,	733993,	829753,	980937, 335988,	392182,	392237,	419156,	501242,	548329,	598000,	598053,	733995,	829757,	980939, 335989,	392183,	392238,	419157,	501243,	548330,	598001,	598054,	733997,	829759,	980941, 335990,	392184,	392239,	419158,	501244,	548331,	598002,	598055,	733999,	829761,	980943, 335991,	392185,	419106,	419159,	501245,	548332,	598003,	598056,	734001,	829763,	980945, 335992,	392186,	419107,	419160,	501246,	548333,	598004,	598057,	734003,	829765,	980947, 335993,	392188,	419108,	419161,	501247,	548334,	598005,	598058,	734005,	829767,	980949, 335994,	392189,	419109,	419162,	501248,	548335,	598006,	598059,	734007,	829769,	980951, 335995,	392190,	419110,	419163,	501249,	548336,	598007,	598060,	734009,	829771,	980953, 335996,	392191,	419111,	419164,	501250,	548337,	598008,	598061,	734011,	829773,	980955, 335997,	392192,	419112,	419165,	501251,	548339,	598009,	598062,	734013,	829775,	980957, 335998,	392194,	419113,	501198,	501252,	548341,	598010,	598063,	734015,	829777,	980959, 335999,	392195,	419114,	501199,	501253,	548342,	598011,	598064,	734017,	829779,	980961, 336000,	392196,	419115,	501200,	501254,	548343,	598012,	598065,	734019,	829781,	980963, 336001,	392197,	419116,	501201,	501255,	548344,	598013,	598066,	734021,	829783,	980965, 336002,	392198,	419117,	501202,	501256,	548345,	598014,	598067,	734023,	829785,	980967, 336003,	392199,	419118,	501203,	501257,	548346,	598015,	598068,	734025,	829787,	980969, 336004,	392200,	419119,	501204,	501258,	548347,	598016,	598069,	734027,	829789,	980971, 336005,	392201,	419120,	501205,	501259,	548348,	598017,	598070,	734029,	829791,	980973, 336006,	392202,	419121,	501206,	501260,	548349,	598018,	598071,	734031,	829793,	980975, 336007,	392203,	419122,	501207,	501261,	548350,	598019,	598072,	734033,	829795,	980977, 336008,	392204,	419123,	501208,	501262,	548351,	598020,	598073,	734035,	829797,	980979, 336009,	392205,	419124,	501209,	501263,	548352,	598021,	729279,	734037,	829799,	980981, 336010,	392206,	419125,	501210,	501264,	548353,	598022,	729281,	734039,	829801,	980983, 336011,	392207,	419126,	501211,	501265,	548354,	598023,	729283,	734041,	829803,	980985, 336012,	392208,	419127,	501212,	501266,	548355,	598024,	729285,	734043,	829805,	980987, 336013,	392209,	419128,	501213,	501267,	548356,	598025,	729287,	734045,	829807,	980989, 336014,	392210,	419129,	501214,	501268,	548357,	598026,	729289,	734047,	829809,	980991, 336015,	392211,	419130,	501215,	501269,	548358,	598027,	729291,	734049,	829811,	980993, 336016,	392212,	419131,	501216,	501270,	548359,	598028,	729293,	829705,	829813,	980995, 336017,	392213,	419132,	501218,	501271,	548360,	598029,	729295,	829707,	829815,	980997, 336018,	392214,	419133,	501219,	548306,	548361,	598030,	729297,	829709,	829817,	980999, 336019,	392215,	419134,	501220,	548307,	548362,	598031,	729299,	829711,	829819,	981001, 336020,	392216,	419135,	501221,	548308,	548363,	598032,	729301,	829713,	829821,	981003, 336021,	392217,	419136,	501222,	548309,	548364,	598033,	729303,	829715,	829823,	981005, 336022,	392218,	419137,	501223,	548310,	548365,	598034,	729305,	829717,	980901,	981007, 336023,	392219,	419138,	501224,	548311,	548366,	598035,	729307,	829719,	980903,	981009, 336024,	392220,	419139,	501225,	548312,	548367,	598036,	729309,	829721,	980905,	981011, 336025,	392221,	419140,	501226,	548313,	548368,	598037,	729311,	829723,	980907,	981013, 336026,	392222,	419141,	501227,	548314,	548369,	598038,	729313,	829725,	980909,	981015, 336027,	392223,	419142,	501228,	548315,	548370,	598039,	729315,	829727,	980911,	981017, 336028,	392224,	419143,	501229,	548316,	548371,	598040,	729317,	829729,	980913,	981019, 336029,	392225,	419144,	501230,	548317,	548372,	598041,	733971,	829731,	980915, 336031,	392226,	419145,	501231,	548318,	548373,	598042,	733973,	829733,	980917, 336032,	392227,	419146,	501232,	548319,	548374,	598043,	733975,	829735,	980919, 336033,	392228,	419147,	501233,	548320,	548375,	598044,	733977,	829737,	980921, 336034,	392229,	419148,	501234,	548321,	548376,	598045,	733979,	829739,	980923, 336035,	392230,	419149,	501235,	548322,	548377,	598046,	733981,	829741,	980925];
	let matches = files.map(f=>new Match(YAML.load(`ipl/${f}.yaml`)));
	//get deliveries in array
	let deliveries = matches.map(m => m.getDeliveries()).reduce((r,d)=>r.concat(d),[]);
	//to play around in developer tools console
	gv.deliveries = deliveries;
	gv.matches = matches;

};

//input = array of deliveries, output object with information needed

let getDataFromDels = (deliveries, key, ef) =>{
	let ret = d3.nest()
		.key(key)
		.rollup(ef)
		.entries(deliveries)
		.map(o => Object.assign({}, {key: o.key}, o.value) );
	console.table(ret);
	return ret;
}

//extract functions
//take in array of deliveries and output processed info

let getBoundaries = l => {
	let count_sixes = l.filter(d=>d.runs.batsman==6).length,
	count_fours = l.filter(d=>d.runs.batsman==4).length;
	return {
		count_sixes,
		count_fours,
		count_boundaries: count_sixes + count_fours
	}
}
let getWickets = l => {
	return {
		count_wickets: l.filter(d=>d.wicket).length
	}
	// return Object.assign({},...d3.nest()
	// .key(d=>d.wicket?d.wicket.kind:'no_wicket')
	// .entries(l)
	// .map(o=>Object.assign({}, {[`count_${o.key}`]: o.values.length} )));
}
let getBatsmanRuns = l => {
	return {
		count_runs: l.reduce((r,d)=>r+d.runs.batsman,0)
	}
}